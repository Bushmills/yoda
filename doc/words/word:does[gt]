name:                does>
stack:               ( -- )
return stack:        ( -- )
string stack:        ( -- )
contexts:            compileonly
category:            defining words

decription:          as part of user created defining words does does> mark the
                     begin of runtime code, contrasting with compile time code
                     before does> was encountered.
                     A defining word in which does> is used consists of two parts:
                     A compile time part, specifying compile time action which
                     included creation of a new word, and the run time part, as
                     indicated by does>. Run time semantics of the created word
                     conform with the code following does>

example:             : emitter  create , does> @ emit  ;    \ standard, less efficient
                     : emitter  constant does> emit  ;      \ non standard, permitted by yoda.
                     '*' emitter star

notes:               see also use and use$.
                     Not only create can be used, also constant or variable can.
                     Where the compile and run time semantics of constant fit
                     the needs of the defined word, more efficient code can be
                     generated by avoidance of argument retrieval from memory, as
                     demonstrated by second line of example. Both versions produce
                     equivalent, but not identical code.

standard:            I think so
url:                 https://forth-standard.org/standard/core/DOES
