only forth definitions

\ ----- defining words -----------------------------------

: create                      ( -- ) ( s: word -- )      \ creation
   here constant  ;           ( -- a )                   \ execution

: create$                     ( --)  ( $1 -- )           \ creation
   here constant$  ;          ( -- a )                   \ execution

: variable                    ( -- ) ( s: word -- )      \ creation
   create cell allot  ;       ( -- a )                   \ execution

: primitive                   ( s: word -- ) ( $1 -- )   \ creation
      code
      postpone code,
      ;code  inline  ;

: buffer:                     ( a -- ) ( s: word -- )    \ creation
      create allot  ;         ( -- a )                   \ execution

' have$ alias xt                                                                                   inline
: noname                      ( -- xt )
      last$ dup$ xt
      protect trash$  ;

\ ----- system constants ---------------------------------

' noop alias chars                                                                                 immediate
' noop alias cells                                                                                 immediate
' noop alias aligned                                                                               immediate
' noop alias align                                                                                 immediate
' 1+   alias char+   inline
' 1+   alias cell+   inline

\ ----- arithmetics --------------------------------------

' lshift alias <<                                                                                  inline
' rshift alias >>                                                                                  inline

: /mod         ( n1 n2 -- n3 n4 )                     1 -rot  */mod                       ;                 \ divisions are truncated, symmetric
: */           ( n1 n2 n3 -- n4 )                     */mod nip                           ;        inline
: /            ( n1 n2 -- n3 )                        /mod nip                            ;        inline
: mod          ( n1 n2 -- n3 )                        /mod drop                           ;
: %            ( n1 n2 -- n3 )                        #50 */ dup 0< 1 or + 2/             ;                 \ percentage rounded, not truncated
: cull         ( x1 x2 f -- x1|x2 )                   if nip exit then drop               ; transient inline
: min          ( n1 n2 -- n1|n2 )                     2dup >  cull                        ;
: max          ( n1 n2 -- n1|n2 )                     2dup <  cull                        ;
: umin         ( u1 u2 -- u1|u2 )                     2dup u> cull                        ;
: umax         ( u1 u2 -- u1|u2 )                     2dup u< cull                        ;
: s>d          ( n -- d )                             dup 0<                              ;        inline
: within       ( x low high -- flag )                 over - >r - r> u<                   ;
: um/mod       ( d u1 -- u2 u3 )                      ud/mod drop                         ;        inline   \ d / u1 -> quotient u3 remainder u2
: dabs         ( d1 -- d2 )                           dup 0< lest dnegate                 ;

\ ----- memory -------------------------------------------

: kibi         ( n1 -- n2 )                           #10 <<                              ;        inline
bits #22 < unless : mebi  ( n1 -- n2 )                #20 <<                              ;        inline
bits #32 < unless : gibi  ( n1 -- n2 )                #30 <<                              ;        inline
#128 kibi cells 1-  constant memend     ( must be 2^u-1 )                                  transient          \ use a configurable item instead
: unused       ( -- u )                               here negate memend and              ;
: pad          ( -- a )                               here #256 +                         ;        inline      \ use a configuration item instead
: erase        ( a u -- )                             0 fill ;                                     inline      \ 0 -> m[a++],  u times
: scrape       ( a i -- i*x )                         for skim swap next drop             ;
: spread       ( i*x a u -- )                         tuck cells +
                                                      swap for cell - tuck ! next drop    ;

\ ----- i/o ----------------------------------------------

defer query$                                          ' simplequery$ is query$
: type         ( c-addr u -- )                        pack$ type$                         ;        inline
: ltype$       ( u -- ) ( $1 -- )                     dup$ type$ count$ - spaces          ;
: rtype$       ( u -- ) ( $1 -- )                     dup$ count$ - spaces type$          ;
: c-addr       ( -- a )   ( $1 -- )                   here dup 1+ unpack$ over c!         ;
: c-addr,u     ( -- a u ) ( $1 -- )                   here dup    unpack$                 ;
: parse        ( c -- c-addr u )                      parse$ c-addr,u                     ;
: parse-name   ( -- c-addr u )                        word$  c-addr,u                     ;
: source       ( -- c-addr u )                        "tib" env$ c-addr,u                 ;
: word         ( c -- c-addr )                        -whitespace parse$ c-addr           ;
: s(           ( -- c-addr u )                        ')' parse                           ;
: .(           ( -- ) ( s: delim )                    ')' parse$ type$                    ; immediate
: c"           ( -- ) ( $1 -- )                       '"' parse$ c-addr
                                                      dup postpone literal
                                                      c@ 1+ allot                         ; compiled
: s"           ( -- )                                 postpone c"  postpone count         ; compiled
: ."           ( -- )                                 '"' parse$
                                                      postpone literal$
                                                      postpone type$                      ; compiled

\ ----- pictured number conversion -----------------------

' prepend$ alias hold                                                                              inline
: holds$       ( -- ) ( $1 $2 -- $3 )                 swap$ join$                         ;        inline
: holds        ( c-addr u -- )                        pack$ holds$                        ;        inline
: sign         ( f -- ) ( $1 -- $2 )                  0< lest '-' hold                    ;
: #            ( d1 -- d2 )  ( string: $1 -- $2 )     base @  ud/mod
                                                      rot '0 +
                                                      dup '9 u> #39 and +
                                                      hold                                ;
' 2drop alias #>$                                                                                  inline
: <#           ( -- $1 )                              ""                                  ;        inline
: #s           ( d1 -- d2 )                           begin # 2dup or 0= until            ;
: #>type       ( d -- ) ( $1 -- )                     #>$ type$                           ;        inline
: #>           ( d -- )                               #>$ c-addr,u                        ;        inline

: udconvert    ( ud -- ) ( -- $1 )                    <# #s #>$                           ;
: dconvert     ( d -- ) ( -- $1 )                     tuck dabs udconvert sign            ;
: d.           ( d -- )                               dconvert type$ space                ;
: ud.          ( ud -- )                              udconvert type$ space               ;
: d.r          ( d u -- )                             >r  dconvert r> rtype$              ;
: ud.r         ( ud u -- )                            >r udconvert r> rtype$              ;

' drop alias x>$                                                                            inline transient
' <# alias <x                                                                               inline transient
: xs           ( d -- d )                             begin x dup 0= until                ; inline transient
: x>type       ( x -- ) ( $1 -- )                     x>$ type$                           ; inline transient
: x>           ( x -- a n )( $1 -- )                  x>$ c-addr,u                        ; inline transient
trash x

: uconvert     ( u -- ) ( -- $1 )                     <x xs x>$                           ;
: convert      ( n -- ) ( -- $1 )                     dup abs uconvert sign               ;
: .            ( n -- )                               convert type$ space                 ;
: u.           ( u -- )                               uconvert type$ space                ;
: .r           ( n u -- )                             >r  convert r> rtype$               ;
: u.r          ( u1 u2 -- )                           >r uconvert r> rtype$               ;

\ ----- files and loading --------------------------------

' satisfy alias needs:                                                                             inline
\ produces execution token and removes header of last word:  : foo ... ; noname
: needed       ( -- f ) ( stream: word )              word$ needed$                       ;        inline
: have         ( -- 0|xt ) ( stream: word )           word$ have$                         ;        inline      \ word exists?
: lack         ( -- flag ) ( stream: word )           have  0=                            ;        inline      \ word missing?
: [']          ( -- )   ( stream: word )              ' literal,                          ; compiled

\ ----- environment --------------------------------------

: newwordlist$  ( -- wid )  ( $1 -- )                 here$ $, dup initwordlist           ;
"environment" newwordlist$ constant environment
: environment?    ( c-addr u -- false | i*x true )    environment searchwordlist
                                                      dup lest count scrape true          ;
: environment!    ( i*x i c-addr u -- )               here -rot environment writewordlist
                                                      dup c,
                                                      here swap dup cells allot spread    ; transient
#255          1 s( /COUNTED-STRING)     environment!  \ max count of chars in a counted string
pad here - 1- 1 s( /HOLD)               environment!  \ size of the pictured numeric output string buffer, in characters
#4095         1 s( /PAD)                environment!  \ size of the scratch area pointed to by PAD, in characters
bits          1 s( ADDRESS-UNIT-BITS)   environment!  \ size of one address unit, in bits
false         1 s( FLOORED)             environment!  \ true if floored division is the default
#127          1 s( MAX-CHAR)            environment!  \ maximum value of any character in the implementation-defined character set
-1 msb 1-     2 s( MAX-D)               environment!  \ largest usable signed double number
-1 dup        2 s( MAX-UD)              environment!  \ largest usable unsigned double number
maxint        1 s( MAX-N)               environment!  \ largest usable signed integer
maxuint       1 s( MAX-U)               environment!  \ largest usable unsigned integer
#1023         1 s( RETURN-STACK-CELLS)  environment!  \ maximum size of the return stack, in cells
#2047         1 s( STACK-CELLS)         environment!  \ maximum size of the data stack, in cells

\ ----- unsorted -----------------------------------------

: evaluate     ( c-addr u -- )                        pack$ evaluate$                     ;        inline
: quit         ( ??? -- )                             warm
                                                      begin
                                                         query$ evaluate$
                                                         resolve
                                                         prompt
                                                      again                               ;

"cold" primitive cold
' cold alias abort
: (abort")     ( ??? flag -- ??? | empty )            if type$ cr abort then drop$        ;
: abort"       ( -- ) ( s: string deliited by " )     '" parse$
                                                      postpone literal$
                                                      ['] (abort") compile,               ;        compiled
: ?abort       ( f -- )                               lest abort                          ;

\ ----- files and loading --------------------------------

' origin alias thisfile                                                                                        \ better symmetry with thisfile$
: once         ( -- )                                 loaded lest done                    ;                    \ prevent reloading file
: from         ( -- ) ( stream: filename )            word$ from$                         ;        inline
: thisfile$    ( -- )   ( -- $1 )                     thisfile filename$                  ;        inline      \ produce name of currently loaded file

\ ----- experiments --------------------------------------

done
omit
\ modify word name prior to header creation
\ background: let a word with "compiled" properties change header flags (issue 17)
: rather ( $1 -- )
       >body[0]="${ss[-1]}"
      drop$  ;
: foo  [ "bar" rather ]   me .name cr  ;
