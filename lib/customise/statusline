provides: statusline +l -l
needs: uppercase movecursor bold blue fg bg deol .s columns

create statusline   true ,
2 constant spacing               transient

: +l   statusline on ;
: -l   statusline off
       0 0 movecursor deol         \ empty top line
       restorecursor ;

: show0           ( $1 -- )
        type$
        spacing spaces ;         transient

: show1           ( x -- ) ( $1 -- )
        base @ >r
        decimal
        type$ ': emit 0 u.r
        spacing spaces
        r> base ! ;              transient

: show$           ( $1 $2 -- )
        swap$ type$
        ': emit show0 ;          transient

: status          ( c -- )  ( $1 -- $2 )
        if uppercase
        then append$ ;           transient

: flags  ( -- $1 )
        "flags" ""
        'f  forwardrefs @     status
        'i  instantresolve @  status
        's  shell @           status  ;      transient

: plenty  ( columns width prio -- columns flag )
   spacing * + over < ;                      transient


\ 120 columns for full status line
\ NOTE: define a version of .s which fits output into available space, truncated if necessary
: .status  ( -- )
   columns
      bold yellow fg  ( blue bg )  deol
\     +------ space required
\     |  +--- priority ( 1 is highest )
\     |  |
      98 9 plenty if "yoda version " type$ "v" env$        show0  then
      57 7 plenty if                 "bits"    bits        show1  then
       9 1 plenty if                           flags       show$  then
      32 4 plenty if                 "files"   #files      show1  then
      17 2 plenty if                 "unres"   #unresolved show1  then
      24 3 plenty if                 "base"    base @      show1  then
      41 5 plenty if                 "here"    here        show1  then
      50 6 plenty if                 "rdepth"  rdepth      show1  then
      80 8 plenty if                 "stack:"  type$   >r .s r>   then
   drop
;

\ increasing window size vertical creates screen relicts if not done gently
: redraw  ( -- )
        statusline @ lest
        0 0 movecursor
        .status deol cr deol
        restorecursor  ;

>trap ${functionname_prefix}_${m[last]} SIGWINCH
