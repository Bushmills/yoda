( tools for automated test suite )
provides: expected testsection

needed expected unless omit
random constant canary
: expected ( x1 x2 -- )
      = unless  >echo "- failed line $linenr:  $tib"
;

needed testsection unless done

\ using lots of variable for saving stack states to avoid
\ that possible errors in test subjects interfere with
\ test status data.

variable initialstack
variable resultstack
variable teststack
variable testresults
variable expectedresults
$variable lasttest$

"notransients"  primitive purge                                                                    transient
: testsection ( -- ) ( s: line )       0 parse$ lasttest$ $!  purge ;
"((sp=s[sp]))"  primitive  sp!                                                                     transient

' testsection alias testing

: .issue    ( $1 -- )                  ":" join$  20 ltype$ ;                                      transient inline
: .tib      ( -- )                     "tib" env$ type$ cr ;                                       transient inline
: .offending ( -- )                    "offending test" .issue  .tib  ;                            transient

: .failedtest ( -- )                   "failed test" .issue   lasttest$ $@ type$  cr  ;            transient inline
: .report1     ( n -- ) ( $1 -- )      .issue  .  cr  ;                                            transient inline
: .report ( n1 n2 -- )  ( $1 $2 -- )   .failedtest swap swap$ .report1 .report1 .offending abort ; transient

: restorestacks ( any -- ???  )        initialstack @ sp!  ;                                       transient inline
: savestacks ( ??? -- )                resultstack @  teststack @ over -  expectedresults !
                                       initialstack @ -  testresults ! ;                           transient inline
: wrongstack  ( -- )                   "expected results"  expectedresults @
                                       "got results"       testresults @
                                       .report ; transient inline
: wrongresult ( -- )                    "expected" "got"  2dup .report ;   transient inline

: assess  ( ??? -- ??? )
        savestacks
        testresults @  expectedresults @ <> if wrongstack  then
        expectedresults @ 0 ?do
            expectedresults @ pick
            2dup <> if 2dup wrongresult then
            2drop
        loop
        restorestacks
; transient inline

: t{    depth initialstack !  ;
: ->    depth resultstack ! ;
: }t    depth teststack !
        assess ;
