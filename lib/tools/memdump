provides: dump wdump


needed wdump unless omit
: .cells    ( a u -- )              \ output u cells fromon address a
         for skim
            >printf "%0$(((bits+3)/4))x " "$((${s[sp--]}))"
         next drop ;    transient
: wdumpline ( a1 u -- a2 )          \ single line dump of u cells at a.
         over u. 2 spaces           \ address
         2dup .cells +  ;   transient
: integers/line  ( linelen -- u )
         bits 1+ 2 >>               \ number of chars per integer
         1+                         \ plus one space separating them
         / ;      transient inline
: #outputlines ( totalintegerstodump integersperline -- numberoflinestodump )
         >r r@ + 1+
         r> / ;  transient inline
: wdump  ( a n -- )                 \ "wide" dump.  cell dump, "cdump", looks like "char dump"
         base @ >r hex              \ save current number base, change to hex
\ NOTE: should use actual char count in address instead of 5 ( plus 2 spaces ) here.
         columns 7 -                \ minus address and spaces, leaves that many chars for dump
         integers/line
         -rot pluck
         #outputlines for           \ loop through number of lines to output
            over wdumpline cr
         next 2drop
         r> base !  ;               \ restore former number base

needed dump unless done

: .bytes ( a u -- )                 \ output u hex bytes at a
      for count
         >printf "%02x " "$((${s[sp--]}))"
      next drop ;       transient

: safe ( c1 -- c2 )                 \ replace nonprintable chars against .
      dup bl u<
      over $7e u> or
      lest drop '.' ;   transient

: .chars ( a u -- )                 \ output u chars at a. "type" isn't control char safe
      ""                            \ initialise top string stack item with empty string
      for count                     \ appending chars to top string stack item, then
         safe append$               \ outputting the whole string is slightly
      next drop                     \ faster than emitting chars one by one.
      type$ ;           transient

: dumpline ( a1 u -- a2 )           \ single line hexdump of u bytes at a.
      over 4 u.r 2 spaces
      2dup .bytes space
      2dup .chars +  ;   transient

: dump  ( a n -- )
      base @ >r hex                 \ save current number base, change to hex
      >r dup $f invert and          \ let address begin at 16 byte boundary
      tuck - r> +                   \ correct count of bytes to output accordingly
      #15 + #16 /                   \ determine number of lines to output
      for
         #16 dumpline cr            \ loop through lines
      next drop
      r> base !  ;                  \ restore former number base
