name:                immediate
stack:               ( -- )
return stack:        ( -- )
string stack:        ( -- )
contexts:            stateless
category:            compiling

description:         emulates setting the most recently defined word "immediate".
                     yoda doesn't know "immediate" words, and as such mimicks such
                     words by creating two headers, both pointing to the same code
                     code, very much like an alias does. One of these header is moved
                     to compiler wordlist. The interpret time header can be found through
                     order, the compiler header at compile time. The result is what one
                     would expect from immediate words.
                     Note that while state smartness of "immediate" words, in the sense
                     of semantics differing according execution state, is possible, the
                     preferred mechanism is to define the different semantics in two
                     discrete but identically named words, with one of them set as
                     "compiled".

example:             : //   0 parse$ drop$  ;  immediate
notes:               setting flags like protect, inline ought to be done before
                     marking the word as immediate: after "immediate" will the last
                     header be moved - any following mode flags don't refer to the
                     header of the "immediate" word any longer.

standard:            yes
url:                 https://forth-standard.org/standard/core/IMMEDIATE
