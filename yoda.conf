####################################################################
#################### optional configuration file ###################
####################################################################

### all settings have hopefully reasonable defaults in yoda,
### but can be changed here to more suitable settings.


### default command line, executed if not command line parameters given
# default='boot quit "yoda shell" type$ cr prompt needs: files fix shortcuts page'


### silent or chatty system. Debugging aid,
### any integer other than 0 turns chatty on.
# trace=0


### set to 1 to see input to optimiser/detokeniser before it
### starts processing it. Informative, debugging aid.
# codedump=0


### no way found yet to re-perform a real warm- or coldstart.
### Ctrl-C is therefore unable to abort executing functions.
### return to and proceed with interrupted function (0), exit (1),
### or run coldvector (2). Latter can be assigned by boot. Loading
### library quit set perfect conditions for break=2.
### The function coldvector is pointing to is run on top op the
### interrupted function, thereby increasing call stack depth
### for every pushed Ctrl-C
# break=2


### will errors and ctrl-c empty stack and string stack?
### when using yoda interactively, it can be a nuisance to lose
### stack contents after a typo. clean=0 leaves stacks untouched
### in case of error or ctrl-c.    _  has been provided to quickly
### empty stacks manually.
# clean=1


### setting callstack to non-zero instructs error handler to show
### a dump of function names helping to pinpoint where the error
### occured. The number given here determines how many levels deep
### function names are printed. Set to 1 to show only the name of
### the word wherin the error occured.
# callstack=0



####################################################################
########################## editor used #############################
####################################################################

### used for:
### editing word doc files
### editing loaded source/library files
### words fix and review loaded from library
#editor="vi"                  # editors run in console, not backgrounded
#xeditor="featherpad"         # xeditors open window and are backgrounded
#editor="less"
# ----- one setting above should suffice -----

# with this I can keep my version customized with an editor you're
# less likely to use, while not needing a different config.
#
# You're free to remove this section ...
[[ "$HOSTNAME" == "h2" ]] && xeditor="efte"
[[ "$HOSTNAME" == "latitude" ]] && xeditor="efte"
# ..... up to here .....


[[ -n "$editor" ]]  && editor()  { $editor "$@"; }                   # used with doc, edit
[[ -n "$xeditor" ]] && {
   editor()  { $xeditor "$@" & }                                     # used with doc, edit
   editor="$xeditor"
}

####################################################################
################  where to find documentation files ################
####################################################################


### documentation base directory. Set to absolute path. Use $mydir as
### placeholder for directory where yoda resides.
# doc="$mydir/doc"

### used as part of word file names,
### prevents files to go hidden by leading period in word names
# worddoc_prefix="word"

### directory where documentation of words reside in,
### with word file prefix appended.
# worddoc="$doc/words/$worddoc_prefix"



####################################################################
######## where and what to look for when loading libraries #########
####################################################################


### the dependencies file is a record of all "provides:" statements found
### in the library files of the first directory specified above, formated
### such that the file containing source of a word is quickly found.
### Here you specify the location and name of the dependencies file.
# dependencies="$mydir/dependencies"


### possible locations of library files, and those
### included when using "from" from yoda source

### begin with an empty list, as it will already contain defaults
# libdirs=()

### add directory "lib" under dir where yoda resides, if existing
### the first added directory has an extra characteristic: it is
### additionally used for resolving forward references. the word
### "dependencies" scan its contents and that of its subdirectories,
### and created the file "dependencies" from it. Other directories
### in libpath aren't scanned, and are therefore not suited for
### libraries containing forward referencable code.
# [[ -d "$$mydir/lib" ]] && libdirs+=("$mydir/lib")

### add current directory
# libdirs+=("$PWD")

### add directory wherein yoda resides
# libdirs+=("$mydir")

### add a directory with a fixed named path, if existing
# [[ -d "/usr/local/lib/yoda" ]] && libdirs+=("/usr/local/lib/yoda")

### add a directory in your home directory, if existing:
# [[ -d "$HOME/yodalib" ]] && libdirs+=("$HOME/yodalib")




####################################################################
##################### specify arithmetic model #####################
####################################################################


### Can't use 64 bit - bash doesn't know unsigned.
### 63 bit is best I can do for now.
# bits=63
### testing signed/unsigned is easier with small models:
# bits=16
# or with even 8 bits
# bits=8


####################################################################
####################### function names #############################
####################################################################


### This is a prefix of bash function names,
### anything allowed here, as long the used characters
### are acceptable for use in bash function names.
# header_code="yoda"

### a unique token will be added to $header_code for each
### generated function, along with an underscore character appended
### to $header_code. nextname must be an integer, and will
### become the first token used. Mostly cosmetic, for displaying
### headers of identical lengths and sorting them for crossref.
### If you expect to define more than 9000 words (unlikely), set it
### to a low 5 digit number. Three digits should generally be sufficient,
### but why bother.
# nextname="1000"

