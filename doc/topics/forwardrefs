TOPIC: forward references

By default will yoda not create forward references on its own, and behave
like any conventional Forth interpreter: You can execute or compile only
what is already present in the dictionary.

Still, forward references can be used without actually enabling them.
"Enabling" in this context means, allowing yoda to create forward references
to unresolved words itself.

------------ removed stuff because outdated -----------



Rather than creating the forward reference, then resolving it manually, we
could also have included the word directly, by entering:

   satisfy hello

Using "satisfy" doesn't require an extra resolve run, while with need / resolve,
marking a word as needed, and compiling it from library is split into two
events seperated in time. Therefore is "need" also usable for forwardrefs
which don't yet exist, but still need to be defined later on. "satisfy" on
the other hand requires that a word source can be found and compiled right away.
I may silently convert an unsatisfied "satisfy" into a "need" eventually if that
seems to be of advantage.


------------- inserted because updated -----------------
actually, no "satisfy" needed now. Just enter "hello".
satisfy still has a purpose, though. It's just not needed
any longer for this example.

---------------------------------------------------------

Resolving also happens automatically sometimes.
Just before the prompt shows is when such a resolve run
takes place (naturally only doing any work if there are
unresolved words in the dictionary)


You don't need to enable forward references to still be able
to use them. The word "need" can create them explicitely:

  need bar
: foo  bar  ;

Resolving takes place automatically anyway, when a forward ref'd
word becomes available, regardless of whether forwards refs are
enabled or disabled. Simply defining it counts as "becomes available":

: bar "this is bar" type$  ;



The compiler can be instructed to accept unknown words as forward references
automatically, without us needing to mark those with "need".
To enable automatic forward references, set the variable "forwardrefs" to
a non-zero value:

   forwardrefs on

or by using the shortcut:

  +f


To turn automatic forward referencing off again, execute:

   forwardrefs off

or

   -f



Forward references can be created and resolved even while they're typed,
interactively. This needs enabling to. The variable for doing this is
called  "instantresolve":

   instantresolve on
( or  +i   , which is now enabled by default )



------------ removed some, outdated ------------



A forward referencable word from the library is "dump" ("hello" is now a
poor example because already present - you'd need to exit and restart
yoda in order to forget it again). With "instantresolve" on, create a
hex dump of a memory portion:

   $1000 $100 dump

While the memory contents, presumably all zeroes, aren't that interesting,
the fact that we were now able to run a definition which still needed loading
and compiling before being executed is. You possibly noticed a small delay
between pressing "Enter" and the hex dump showing - that's the time yoda
needed to find dump, then read and compile it prior to executing it.

For managing conditional compilation, these words exist:

         need
         needed
         resolve
         have
         lack
         satisfy, needs:
         dependencies

needed   can be used to test a list of words against forward reference. A flag
         is produced, reflecting the result of the test.
         needed consumes the while input line. Each space delimited string is
         treated as a potential word name, and its forward reference status
         examined. Any hit causes needed to return true.
         This flag can be conditionally responded to with flow control constructs
         like "lest" and "unless". Example:
         needed foo bar
         unless done       ( next line! )

need     creates a forward reference explicitely. Execution of resolve will attempt
         to resolve all forward references.
         Execute "forwardrefs on" for creating forward refs into compiled words
         automatically. With forwardrefs on, executing "instantresolve on" will also
         resolve words entered for instant execution immediately

have     check whether a word exists, return execution token or 0
lack     check whether a word exists, return flag (logical not of result from have)

resolve  tries to locate source files of all remaining forward references and loads
         them. forwardrefs are turned on, so that forward referenced words can create
         new forward references as needed. Old forwardrefs status will be restored
         after resolve.

provides: followed by one or several space delimited word names. used to building
         library dependency file, letting the system know which source files provide
         code for which definitions, so the file path and name can be produces when
         source of a word needs to be included.

satisfy	 these are aliases. They read the remainder of input line and try to immediately
needs:   resolve each word read from line, without going through forward references.
         name "needs" is offered as alias because it pairs nicely with "provides:",
         while "satisfy" may be more suited for interactive use.

dependencies  rebuilds the dependency database. only needs to be done if base doesn't
         exist or is outdated. base becomes outdated when new library files are added
         or removed, words moved between library files, their name or path changed,
         or the database file becoming corrupted.
         yoda will execute dependencies automatically during launch if database doesn't
         missing.

